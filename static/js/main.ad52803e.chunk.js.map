{"version":3,"sources":["api/apiRoutes.js","components/category.jsx","pages/home.jsx","components/bookCard.jsx","container/bookList.jsx","router/router.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","categoriesUrl","booksUrl","Category","category","onClick","style","backgroundImage","displayImg","backgroundSize","className","onClickCapture","categoryId","categoryName","Home","props","navigateToBooks","id","console","log","history","push","componentDidMount","a","axios","get","categories","setState","data","state","this","map","key","React","Component","BookCard","book","title","src","thumbnailUrl","alt","authors","author","BookList","match","params","response","filteredList","filter","books","isbn","Router","basename","process","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad52803e.chunk.js","sourcesContent":["const baseUrl = \"https://niravkpatel28.github.io/json-data-server/books\";\nexport const categoriesUrl = `${baseUrl}/categories.json`;\nexport const booksUrl = `${baseUrl}/books.json`;\n","import React from \"react\";\nimport \"./category.style.css\";\nconst Category = ({ category, onClick }) => {\n  const style = {\n    backgroundImage: `url(${category.displayImg})`,\n    backgroundSize: \"auto\",\n  };\n  //   console.log(category);\n  return (\n    <div\n      className=\"categoryDiv\"\n      style={style}\n      onClickCapture={() => {\n        onClick(category.categoryId);\n      }}\n    >\n      <h3> {category.categoryName} </h3>\n    </div>\n  );\n};\n\nexport default Category;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { categoriesUrl } from \"../api/apiRoutes\";\nimport Category from \"../components/category\";\n// import BookList from \"../container/bookList\";\nimport \"./home.style.css\";\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categories: [], // book categories\n    };\n  }\n\n  navigateToBooks = (id) => {\n    console.log(\"navaigate to \", id);\n    console.log(this.props.history);\n    this.props.history.push(`/category/${id}`);\n  };\n\n  // api call for books api\n  componentDidMount = async () => {\n    let categories = await axios.get(categoriesUrl);\n    this.setState({\n      categories: categories.data,\n    });\n  };\n\n  render() {\n    console.log(this.props);\n    return (\n      <div>\n        <h1> Home Component </h1>\n        <div className=\"categoryContainer\">\n          {this.state.categories.map((category) => {\n            return (\n              <Category\n                category={category}\n                key={category.categoryId}\n                onClick={this.navigateToBooks}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","//render the book card with its image author name and price\n// also add a button of counter to add or subtract imagee\n\nimport React from \"react\";\nimport \"./bookCard.style.css\";\nconst BookCard = ({ book }) => {\n  console.log(\"sent book \", book);\n  return (\n    <div className=\"bookCard\">\n      <h4> {book.title} </h4>\n\n      <img className=\"bookImage\" src={book.thumbnailUrl} alt=\"thumbnail\" />\n      <div className=\"authors\">\n        {\" \"}\n        {book.authors.map((author) => (\n          <p>{author} </p>\n        ))}{\" \"}\n      </div>\n    </div>\n  );\n};\n\nexport default BookCard;\n","//this container will be rendered when the user clicks on one of the\n// categories. The url will be /category/categoryId\n// this will render all the books within that category\n// the component will have to fetch all books within the given category\n// ideally category based api call will be implemented in the back end server.\n// since we are using json file we will use filter method on the data array\nimport React from \"react\";\nimport axios from \"axios\";\nimport { booksUrl } from \"../api/apiRoutes\";\nimport BookCard from \"../components/bookCard\";\nimport \"./bookList.style.css\";\nclass BookList extends React.Component {\n  // booklist will get a prop\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      categoryId: this.props.match.params.categoryId,\n    };\n  }\n\n  componentDidMount = async () => {\n    let categoryId = this.props.match.params.categoryId;\n    let response = await axios.get(booksUrl);\n    // this fetches all the books, we need only those books which match the relevant\n    //category id\n    // also the required list is in filteredList[0].books array of the filtered list\n    let filteredList = response.data.filter(\n      (category) => category.categoryId === categoryId\n    );\n\n    // console.log(\"fetched book\", filteredList[0].books);\n    this.setState({\n      books: filteredList[0].books,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"bookContainer\">\n        <h1> Book list for category </h1>\n        <div className=\"allBooks\">\n          {this.state.books.map((book) => {\n            return <BookCard book={book} key={book.isbn} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BookList;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from \"../pages/home\";\nimport BookList from \"../container/bookList\";\nconst Router = (props) => {\n  console.log(\"router props \", props);\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/category/:categoryId\" component={BookList} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import React from \"react\";\nimport \"./App.css\";\nimport Router from \"./router/router\";\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1> E-Commerce</h1>\n        <hr />\n        <Router></Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}